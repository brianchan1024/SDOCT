#pragma once

#include "parameters.h"
#include "gpu_kernels.cuh"
//#include "DP_logger.h"

#define TILE_WIDTH 16				// 2D grid parameter
#define THREADS_PER_BLOCK 256		// 1D grid parameter 

#define gpuErrchk(ans) { gpuAssert((ans), __FILE__, __LINE__); }
#define cufftErrchk(err) { cufftAssert((err), __FILE__, __LINE__); }

/* 
 * Anything used by multiple classes goes here. Functions, variables, defines.
 */

class Helper
{
public:
	Helper(Parameters &p);
	~Helper(void);

	Parameters &p;
	int height_1fr, height_bfr, width, width_2x, width_trm, frames; // Common dimension and launch parameters.
	dim3 dimGrid_w, dimGrid_w2, dimGrid_wt, dimGrid_B;				// Documentation can be used as reference
	dim3 dimLine_w, dimLine_w2, dimLine_wt, dimLine_B;				// for these variables
	float w2Recip, grayRecip;			// recipricals calculated so we can multiply instead of divide.

	// This runs on the CPU and is used in background and dispersion. 
	void columnMean(int h, int w, float2 *my_array, float *result_array, float &columnMeanMax);

	// FFT functions that generate their own cufft plans. 
	void FFT(int height, int width, float2 *initial_array, float2 *result_array);
	void IFT(int height, int width, dim3 dimGrid, dim3 dimBlock, float2 *initial_array, float2 *result_array);

	// Catch errors generated by CUDA. If Data Processor is an .exe, a breakpoint can be put here
	// and an error message will be shown in console. Macros above are used.
	static void gpuAssert(cudaError_t code, const char *file, int line, bool abort=true);
	static void cufftAssert(cufftResult err, const char *file, const int line);

	// Debug functions
	void output_csv(int height, int width, float *my_array, std::string flname);
	void output_csv(int height, int width, float2 *my_array, std::string flname);
	//void output_csv(int height, int width, std::vector<float> &my_array);
	//void check_function(int height, int width, float *& my_array);
	//void check_function(int height, int width, float2 *& my_array);
	//void check_function(int height, int width, std::vector<float> & my_array);

private:
	static const char* cudaGetErrorEnum(cufftResult error);
};




